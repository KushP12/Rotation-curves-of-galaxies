basePath = '/home/tnguser/sims.TNG/TNG50-1/output/'
def rotation_curve_breakdown(subhaloID):
    subhaloid = subhaloID
    gas = il.snapshot.loadSubhalo(basePath, 99, subhaloid, 'gas', fields=['Masses', 'Coordinates', 'Potential', 'Velocities'])
    stars = il.snapshot.loadSubhalo(basePath, 99, subhaloid, 'stars', fields=['Masses', 'Coordinates', 'Potential', 'Velocities'])
    dm = il.snapshot.loadSubhalo(basePath, 99, subhaloid, 'dm', fields=['Coordinates', 'Velocities', 'Potential'])

    # Load the total dark matter mass and number of particles
    all_fields = il.groupcat.loadSingle(basePath, 99, subhaloID=subhaloid)
    ptNumDark = il.snapshot.partTypeNum('dm')  # 1


    dm_mass_total = all_fields['SubhaloMassType'][ptNumDark] * 1e10 / 0.6774
    dm_number = all_fields['SubhaloLenType'][ptNumDark]
    dm_particle_mass = dm_mass_total / dm_number
    print("Particle mass is: ", dm_particle_mass)


    """Processes gas or star particles through all necessary steps."""

    minpotid= np.where( stars['Potential']==min(stars['Potential']) )

    x_minpot=stars['Coordinates'][minpotid[0][0],0]
    y_minpot=stars['Coordinates'][minpotid[0][0],1]
    z_minpot=stars['Coordinates'][minpotid[0][0],2]


    #print("Potential minimum coordinates=",x_minpot,y_minpot, z_minpot)
    x = stars['Coordinates'][:,0]; y = stars['Coordinates'][:,1]; z = stars['Coordinates'][:,2]
    vx = stars['Velocities'][:,0]; vy = stars['Velocities'][:,1]; vz = stars['Velocities'][:,2]

    xx=x-x_minpot; yy=y-y_minpot; zz=z-z_minpot

    # checking center of velocity at the central regions of the disk:

    sphere_mask=( np.sqrt(xx*xx+yy*yy+zz*zz) < 20.0 )
    x=xx[sphere_mask]; y=yy[sphere_mask]; z=zz[sphere_mask]
    vx_n=vx[sphere_mask]; vy_n=vy[sphere_mask]; vz_n=vz[sphere_mask]
    #print("Length of vx:", len(vx_n))

    stellar_mass = stars['Masses'][sphere_mask]

    #stellar_mass = stellar_mass[sphere_mask]
    #print("Length of stellar mass:", len(stellar_mass))
    vx_com=sum(vx_n * stellar_mass)/sum(stellar_mass)
    vy_com=sum(vy_n * stellar_mass)/sum(stellar_mass)
    vz_com=sum(vz_n * stellar_mass)/sum(stellar_mass)
    #print("Original center of mass velocity=",vx_com,vy_com, vz_com)
    vx=vx_n-vx_com
    vy=vy_n-vy_com
    vz=vz_n-vz_com
    vx_com_n=sum(vx * stellar_mass)/sum(stellar_mass)
    vy_com_n=sum(vy * stellar_mass)/sum(stellar_mass)
    vz_com_n=sum(vz * stellar_mass)/sum(stellar_mass)

    #print("Corrected center of mass velocity=",vx_com_n, vy_com_n, vz_com_n)

    # total angular momentum:-----------------------------------
    Lx=sum(stellar_mass*(y*vz-z*vy))
    Ly=sum(stellar_mass*(z*vx-x*vz))
    Lz=sum(stellar_mass*(x*vy-y*vx))
    #print("Total angular momentum= ", Lx,Ly,Lz)
    # unit vector:----------------------------------------------
    L_norm=np.sqrt(Lx*Lx+Ly*Ly+Lz*Lz)
    lx=Lx/L_norm
    ly=Ly/L_norm
    lz=Lz/L_norm
    #print("Direction of total angular momentum",lx,ly,lz, np.sqrt(lx*lx+ly*ly+lz*lz))

    # unit vectors:
    b=[0,0,1]  # final unit vector direction
    a=[lx,ly,lz]  # initial max angular momentum direction
    # definining some factors:-------------------
    v=np.cross(a,b)
    c=np.dot(a,b)
    Iden=np.array([[1,0,0],[0,1,0],[0,0,1]], np.float32)  # Identify matrix
    # definining the Skew-Symmetric matrix of vector v:---------------------
    skew_sym_v=[[0, -v[2], v[1]],
                [v[2], 0, -v[0]],
                [-v[1], v[0], 0]]

    skew_sym_v2=np.matmul(skew_sym_v,skew_sym_v)
    Rot=np.add(Iden,skew_sym_v)
    Rot2=np.add(Rot,skew_sym_v2/(1.0+c))
    #print("Rotation matrix: \n",Rot2)

    #Maximising the z-component of the angular component and rotating the galaxy based on the panel above
    com_disk=np.array([x_minpot, y_minpot, z_minpot], np.float32)
    stars_coordinates_com_frame=stars['Coordinates'] - com_disk
    gas_coordinates_com_frame = gas['Coordinates'] - com_disk
    dm_coordinates_com_frame = dm['Coordinates'] - com_disk

    rotated_coordinates= (Rot2.dot(stars_coordinates_com_frame.T)).T
    x_stars=rotated_coordinates[:,0]; y_stars=rotated_coordinates[:,1]; z_stars=rotated_coordinates[:,2]
    rotated_velocities= (Rot2.dot(stars['Velocities'].T)).T
    vx_stars=rotated_velocities[:,0]; vy_stars=rotated_velocities[:,1]; vz_stars=rotated_velocities[:,2]


    rotated_coordinates= (Rot2.dot(gas_coordinates_com_frame.T)).T
    x_gas=rotated_coordinates[:,0]; y_gas=rotated_coordinates[:,1]; z_gas=rotated_coordinates[:,2]
    rotated_velocities= (Rot2.dot(gas['Velocities'].T)).T
    vx_gas=rotated_velocities[:,0]; vy_gas=rotated_velocities[:,1]; vz_gas=rotated_velocities[:,2]


    rotated_coordinates= (Rot2.dot(dm_coordinates_com_frame.T)).T
    x_dm=rotated_coordinates[:,0]; y_dm=rotated_coordinates[:,1]; z_dm=rotated_coordinates[:,2]
    rotated_velocities= (Rot2.dot(dm['Velocities'].T)).T
    vx_dm=rotated_velocities[:,0]; vy_dm=rotated_velocities[:,1]; vz_dm=rotated_velocities[:,2]


    stellar_mass_stars = stars['Masses']
    stellar_mass_gas = gas['Masses']




    #Calculation of the rotational velocity  

    G = 4.30091e-6
    stellar_mass_stars = (stellar_mass_stars * 1e10)/0.6774 # conversion of mass from 10^10 Msun/h to Msun
    stellar_mass_gas = (stellar_mass_gas * 1e10)/0.6774 # conversion of mass from 10^10 Msun/h to Msun
    #stellar_mass_ = (stellar_mass_stars * 1e10)/0.6774 # conversion of mass from 10^10 Msun/h to Msun


    # Step 1: Calculate radial distance of gas
    radius_stars = np.sqrt(x_stars**2 + y_stars**2 + z_stars**2)
    radius_gas = np.sqrt(x_gas**2 + y_gas**2 + z_gas**2)
    radius_dm = np.sqrt(x_dm**2 + y_dm**2 + z_dm**2)



    rad_values = np.linspace(0,17,50)
    #mass = np.zeros_like(rad_values)
    mass_stars = []
    mass_gas = []
    mass_dm = []
    mass_total = []

    for i in rad_values:
        mass_sel = stellar_mass_stars[(radius_stars < i)]
        mass_stars.append(np.sum(mass_sel))

    for i in rad_values:
        mass_sel = stellar_mass_gas[(radius_gas < i)]
        mass_gas.append(np.sum(mass_sel))

    for i in rad_values:
        rad = radius_dm[(radius_dm < i)]
        mass_r = len(rad) * dm_particle_mass
        mass_dm.append(mass_r)

    for i in rad_values:
        mass_sel_gas = stellar_mass_gas[(radius_gas < i)]
        mass_sel_star = stellar_mass_stars[(radius_stars < i)]
        rad = radius_dm[(radius_dm < i)]
        mass_sel_dm = len(rad) * dm_particle_mass

        big_array = np.hstack((mass_sel_gas, mass_sel_star, mass_sel_dm))

        mass_total.append(np.sum(big_array))



    v_rot_stars = np.sqrt(G * np.array(mass_stars) / rad_values)
    v_rot_gas = np.sqrt(G * np.array(mass_gas) / rad_values)
    v_rot_dm = np.sqrt(G * np.array(mass_dm) / rad_values)
    v_rot_total = np.sqrt(G * np.array(mass_total) / rad_values)
    
    return v_rot_stars, v_rot_gas, v_rot_dm, v_rot_total, rad_values

#Averaging function
total_rotation_curve = []
stars_rotation_curve = []
gas_rotation_curve = []
dm_rotation_curve = []

for each in sample_galaxy_id:
    subhaloid = each
    v_rot_stars, v_rot_gas, v_rot_dm, v_rot_total, rad_values = rotation_curve_breakdown(subhaloid)
    
    #if (len(r_stars) == len(s_mass)) and (len(r_gas) == len(g_mass)) and (len(r_dm) == len(dm_mass)):
    #    total_rotation_curve.append(combined_v)
    #    stars_rotation_curve.append(v_stars)
    #    gas_rotation_curve.append(v_gas)
    #    dm_rotation_curve.append(v_dm)
    
    total_rotation_curve.append(v_rot_total)
    stars_rotation_curve.append(v_rot_stars)
    gas_rotation_curve.append(v_rot_gas)
    dm_rotation_curve.append(v_rot_dm)
    

average_rotation_curve_total = np.mean(total_rotation_curve, axis = 0)
std_rotation_total = np.std(total_rotation_curve, axis = 0)

average_rotation_curve_stars = np.mean(stars_rotation_curve, axis = 0)
std_rotation_stars = np.std(stars_rotation_curve, axis = 0)

average_rotation_curve_gas = np.mean(gas_rotation_curve, axis = 0)
std_rotation_gas = np.std(gas_rotation_curve, axis = 0)

average_rotation_curve_dm = np.mean(dm_rotation_curve, axis = 0)
std_rotation_dm = np.std(dm_rotation_curve, axis = 0)

#radius_values = np.linspace(0, 30, 69)
#radius_values_total = np.linspace(0, 30, 70)

plt.plot(rad_values, average_rotation_curve_total, color = "blue" ,label = "total")
plt.fill_between(rad_values, 
                 average_rotation_curve_total - std_rotation_total, 
                 average_rotation_curve_total + std_rotation_total, 
                 color='blue', alpha=0.1)


plt.plot(rad_values, average_rotation_curve_stars, color = "orange", label = "stars")
plt.fill_between(rad_values, 
                 average_rotation_curve_stars - std_rotation_stars, 
                 average_rotation_curve_stars + std_rotation_stars, 
                 color='orange', alpha=0.1)

plt.plot(rad_values, average_rotation_curve_gas, color = "green" ,label = "gas")
plt.fill_between(rad_values, 
                 average_rotation_curve_gas - std_rotation_gas, 
                 average_rotation_curve_gas + std_rotation_gas, 
                 color='green', alpha=0.1)

plt.plot(rad_values, average_rotation_curve_dm, color = "red", label = "dm")
plt.fill_between(rad_values, 
                 average_rotation_curve_dm - std_rotation_dm, 
                 average_rotation_curve_dm + std_rotation_dm, 
                 color='red', alpha=0.1)

filename = "rotation_curve_data.txt"

with open(filename, "w") as file:
    # Writing header
    file.write("# radius_stars velocity_stars std_dev_stars radius_gas velocity_gas std_dev_gas radius_dm velocity_dm std_dev_dm radius_total velocity_total std_dev_total\n")
    
    # Writing data using zip()
    for row in zip(rad_values, average_rotation_curve_stars, std_rotation_stars,
                   rad_values, average_rotation_curve_gas, std_rotation_gas,
                   rad_values, average_rotation_curve_dm, std_rotation_dm,
                   rad_values, average_rotation_curve_total, std_rotation_total):
        file.write(" ".join(f"{value:.6f}" for value in row) + "\n")  # Format each value to 6 decimal places

print(f"Data successfully written to {filename}")

plt.legend()
a = '\\ V_{circ}  (kms^{-1})'
plt.ylabel('$%s$'%a)
plt.xlabel("Radius (kpc)")
plt.show()

plt.savefig("Average_simulation_curve.png")


    
