#Dark matter model calculation
# Importing Modules
import numpy as np
import import_ipynb
from lmfit import Parameters
import os


#Relevant data for the galaxy
NGCdata = np.loadtxt('Rodmod_LTG/NGC4010_rotmod.dat') # Retrieving data from Newtonian mass model
Vobs = []
Vdisk = []
Vbulge = []
Vgas = []
R = []
for each in NGCdata: # retrieving data for each component of the galaxy
    R.append(each[0])
    Vobs.append(each[1])
    Vdisk.append(each[4])
    Vbulge.append(each[7])
    Vgas.append(each[3])
R = np.array(R)
print(R)
DiskM2L = 0.45 # Disk mass-to-light ratio
BulgeM2L = 0 #Bulge mass-to-light ratio
Vdisk = np.array(Vdisk)
Vdisk = Vdisk * np.sqrt(DiskM2L) # Multiplying the disk component by the mass-to-light ratio from NFW data for consistency 

def AverageFunctionPlotting2(bin_size, maxPlus, GalaxySection, radius): #Adapted function from above that takes in different input values 
    #Runs a selection statement to correctly use the right aspect of the galaxy for the averaging.
    if GalaxySection == "VG":
        x_ticks = plt.gca().get_xticks()
        X_ticks = np.delete( x_ticks, -1)
        maxValue = np.max(X_ticks)
        radius = np.linspace(0, maxValue + maxPlus, bin_size)
        bin_size = radius[1] - radius[0]
        val, stddev, up, down = AverageFunction(radius, Radius, VGasAve, bin_size)
    elif GalaxySection == "VD":
        x_ticks = plt.gca().get_xticks()
        X_ticks = np.delete( x_ticks, -1)
        maxValue = np.max(X_ticks)
        radius = np.linspace(0, maxValue + maxPlus, bin_size)
        bin_size = radius[1] - radius[0]
        val, stddev, up, down = AverageFunction(radius, Radius, VDiskAve, bin_size)
    elif GalaxySection == "VDM":
        x_ticks = plt.gca().get_xticks()
        X_ticks = np.delete( x_ticks, -1)
        maxValue = np.max(X_ticks)
        radius = np.linspace(0, maxValue + maxPlus, bin_size)
        bin_size = radius[1] - radius[0]
        val, stddev, up, down = AverageFunction(radius, Radius, VDarkAve, bin_size)
    else:
        x_ticks = plt.gca().get_xticks()
        X_ticks = np.delete( x_ticks, -1)
        maxValue = np.max(X_ticks)
        radius = np.linspace(0, maxValue + maxPlus, bin_size)
        bin_size = radius[1] - radius[0]
        val, stddev, up, down = AverageFunction(radius, Radius, VobsAve, bin_size)
        
    return val, radius, stddev, up, down



def galaxy_data2(file_name):  #Created a function to retrieve the data from the RodMod_LTG folder for the relevant high mass galaxy to produce rotation curves.
    folder_path = '/cosma/home/durham/dc-pand2/Rodmod_LTG'
    file_path = os.path.join(folder_path, file_name)
    data = pd.read_csv(file_path ,delimiter = "\t")
    array_data = np.loadtxt(file_path)
    Radius = []
    velocity = []
    V_gas = []
    V_disk = []
    V_bulge = []
    for each in array_data:
        Radius.append(each[0])
        velocity.append(each[1])
        V_gas.append(each[3])
        V_disk.append(each[4])
        V_bulge.append(each[5])
    return Radius, velocity, V_gas, V_disk, V_bulge
    
def NFWdata(file_name):  #Created a function to retrieve the data from the NFW folder for the relevant high mass galaxy to get relevant ps and rs values.
    folder_path = '/cosma/home/durham/dc-pand2/Fits'
    file_path = os.path.join(folder_path, file_name)
    data = pd.read_csv(file_path ,delimiter = "\t")
    array_data = np.loadtxt(file_path)
    ps = array_data[2][14]
    rs = array_data[2][12]
    DiskM2L = array_data[2][0]
    return rs, ps, DiskM2L

# from scipy.interpolate import InterpolatedUnivariateSpline as ius
params = Parameters()
params.add("ps", value = 10**(-3.87))  # Scale density in M_sun / pc^3
params.add("rs", value = 323.64) # Scale radius in kpc
params.add("G", value= 4.302)
# My Modules
import Functions as cn
# Begin Code
def rho(p, R):
    """Dark Matter density profile
    Paper 160505971v2.pdf eqn. 4

    Info:
    ---------------
    designed for lmfit

    Parameters:
    ---------------
    p: lmfit parameter object
    - ps : scale density
        - [M⊙ / pc^3]
    - rs : scale radius
        - [kpc]

    Inputs:
    ---------------
    R: scalar / array
        Galactocentric radius [kpc]

    Returns:
    ---------------
    rho: scalar / array
        - [M⊙ / pc^3]
    """
    return p["ps"].value / ((R / p["rs"].value) *
                            (1 + np.square(R / p["rs"].value)))


def M(p, R):
    """Dark Matter Mass(R)
    Paper 160505971v2.pdf eqn. 5

    Info:
    ---------------
    designed for lmfit

    Parameters:
    ---------------
    p: lmfit parameter object
    - ps : scale density
        - [M⊙ / pc^3]
    - rs : scale radius
        - [kpc]

    Inputs:
    ---------------
    R: scalar / array
        Galactocentric radius [kpc]

    Returns:
    ---------------
    Mass: scalar / array
    """
    v = p.valuesdict()
    return 4 * np.pi * np.power(cn.kpc_to_pc(v["rs"]), 3) * v["ps"] *\
                (np.log((R + v["rs"]) / v["rs"]) - (R / (R + v["rs"])))


def g(p, R):
    """Dark Matter spherical halo acceleration

    Info:
    ---------------
    designed for lmfit

    Parameters:
    ---------------
    p: lmfit parameter object
    - ps : scale density
        - [M⊙ / pc^3]
    - rs : scale radius
        - [kpc]
    - G : Gravitational constant
        - 4.302 [kpc km^2 / s^2 M⊙]

    Inputs:
    ---------------
    R: scalar / array
        Galactocentric radius
        - [kpc]

    Returns:
    ---------------
    g_DM: scalar / array
        - [km / s^2]
    """
    return p["G"].value * M(p, R) / (R * cn.kpc_to_km(R))


def Vrot(p, R):
    """Dark Matter spherical halo circular velocity

    Info:
    ---------------
    designed for lmfit

    Parameters:
    ---------------
    p: lmfit parameter object
    - ps : scale density
        * use correct units
    - rs : scale radius
        * use correct units
    - G : Gravitational constant
        - 4.302 [kpc km^2 / s^2 M⊙]

    Inputs:
    ---------------
    R: scalar / array
        Galactocentric radius
        - [kpc]

    Returns:
    ---------------
    V_DM: scalar / array
        - [km / s]
    """
    return np.sqrt(g(p, R) * cn.kpc_to_km(R))

def Vrot2(p, R):
    x = R/p["rs"].value
    V_nfw =  (np.sqrt((C200/x) * (((1+x) - (x/(1+x)))/(np.log(1+C200) - (C200/(1+C200))))))
    return V_nfw




'''LowMass, MediumMass, HighMass, LowMass2, MediumMass2, HighMass2 = galaxy_separation(mass)
galaxyName = high_mass_galaxy(HighMass2)
VobsAve = []
VDarkAve = []
VDiskAve = []
VBulgeAve = []
VGasAve = []
Radius = []
#print(galaxyName)
for each in galaxyName: 
    name = each
    extension = '_rotmod.dat'
    extension2 = '.mrt'
    file_extension = each + extension
    file_extension2 = each + extension2
    R, Vobs, Vgas, Vdisk, Vbulge = galaxy_data2(file_extension)
    VobsAve.append(Vobs)
    VGasAve.append(Vgas)
    VDiskAve.append(Vdisk)
    VBulgeAve.append(Vbulge)
    R = [float(x) for x in R]
    R = np.array(R)
    Radius.append(R)
    rs, ps, DiskM2L = NFWdata(file_extension2)
    Vdisk = np.array(Vdisk)
    Vdisk = Vdisk * np.sqrt(DiskM2L)
    params = Parameters()
    params.add("ps", value = 10**(ps))  # Scale density in M_sun / pc^3
    params.add("rs", value = rs) # Scale radius in kpc
    params.add("G", value= 4.302)
    rho1 = rho(params, R)
    mass = M(params, R)
    acc = g(params, R)
    vel = Vrot(params, R)
    vel = vel/1000
    VDarkAve.append(vel)
    plt.figure()
    plt.plot(R, vel, label = "Dark matter")
    plt.plot(R, Vobs, label = "Vobs")
    plt.plot(R, Vgas, label = "Vgas")
    plt.plot(R, Vdisk, label = "Vdisk")
    plt.plot(R, Vbulge, label = "Vbulge")
    plt.xlabel("Radius(kpc)")
    plt.ylabel("Velocity(km/s)")
    plt.title(each)
    #plt.plot(R, Vbulge, label = "Vbulge")
    plt.legend()


averageHM, radiusHM, stddevHM ,upperHM, lowerHM = AverageFunctionPlotting2(25, 13, "VD", VDiskAve)
radiusHM = np.delete(radiusHM, -1)
plt.plot(radiusHM,averageHM, color = "black",label = "Average")
plt.scatter(radiusHM, averageHM, s = 7, color = "black")
plt.fill_between(radiusHM, upperHM, lowerHM, color="grey",alpha=0.4)'''


#vel2 = Vrot2(params, R)
rho1 = rho(params, R)
mass = M(params, R)
acc = g(params, R)
vel = Vrot(params, R)
vel = vel/1000
plt.plot(R, vel, label = "Dark matter")
plt.plot(R, Vobs, label = "Vobs")
plt.plot(R, Vgas, label = "Vgas")
plt.plot(R, Vdisk, label = "Vdisk")
plt.xlabel("Radius(kpc)")
plt.ylabel("Velocity(km/s)")
    

plt.show()
